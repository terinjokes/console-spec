<pre class="metadata">
Title: Console Standard
Group: WHATWG
H1: Console
Shortname: console
Repository: whatwg/console
Status: LS
Boilerplate: omit conformance, omit feedback-header
Editor: Terin Stock, https://terinstock.com, terin@terinstock.com
Editor: Robert Kowalski, http://kowalski.gd, rok@kowalski.gd
Abstract: This specification defines APIs for console debugging facilities.
Logo: https://resources.whatwg.org/logo-console.svg
!Participate: <a href="https://github.com/whatwg/console">GitHub whatwg/console</a> (<a href="https://github.com/whatwg/console/issues/new">new issue</a>, <a href="https://github.com/whatwg/console/issues">open issues</a>)
!Participate: <a href="https://wiki.whatwg.org/wiki/IRC">IRC: #whatwg on Freenode</a>
!Commits: <a href="https://github.com/whatwg/console/commits">GitHub whatwg/console/commits</a>
!Commits: [SNAPSHOT-LINK]
!Commits: <a href="https://twitter.com/consolelog">@consolelog</a>

Opaque Elements: emu-alg
Link Defaults: html (dfn) structured clone
</pre>

<style>
  .note + .example, .note + .note { margin-top: 1em; }

  emu-val { font-weight: bold; }
  emu-alg > ol, emu-alg > ol ol ol ol { list-style-type: decimal; }
  emu-alg > ol ol, emu-alg > ol ol ol ol ol { list-style-type: lower-alpha; }
  emu-alg > ol ol ol, emu-alg > ol ol ol ol ol ol { list-style-type: lower-roman; }
  emu-alg li { margin: 0; }

  .heading[aoid] .annotation {
    background-color: beige;
    border: 1px solid black;
    border-radius: 3px;
    cursor: help;
    display: inline-block;
    font-size: 70%;
    font-weight: normal;
    padding: 1px 2px;
  }
</style>

<script src=https://resources.whatwg.org/file-issue.js async></script>
<script src=https://resources.whatwg.org/commit-snapshot-shortcut-key.js async></script>
<script src=https://resources.whatwg.org/dfn.js defer></script>

<h2 id="status" class="no-num no-toc">Status</h2>

This specification is an early work in progress that welcomes feedback to refine toward more precise and compatible definitions. It is also the editors' first specification, so please be kind and constructive.

Please join us in the <a href="https://github.com/whatwg/console/issues">issue tracker</a> for more discussion.

<h2 id="supporting-ops">Supporting abstract operations</h2>

<h3 id="logger" aoid="Logger" nothrow>Logger(<var>logLevel</var>, <var>args</var>)</h3>

The logger operation accepts a log level and a List of other arguments. Its main output is the implementation-defined side effect of printing the result to the console. This specification describes how it processes format specifiers while doing so.

<emu-alg>
  1. If _args_ is empty, abort these steps.
  1. Let _first_ be the first element of _args_.
  1. Let _rest_ be all elements following _first_ in _args_.
  1. If _rest_ is empty, perform Printer(_logLevel_, «_first_»). Abort these steps.
  1. If _first_ does not contain any format specifiers, perform Printer(_logLevel_, _args_).
  1. Otherwise, perform Printer(_logLevel_, Formatter(_args_)).
  1. Return *undefined*.
</emu-alg>

<div class="note">
  It's important that the printing occurs before returning from the algorithm. Many developer consoles print the result of the last operation entered into them. In such consoles, when a developer enters <code>console.log("hello!")</code>, this should first print "hello!", then the undefined return value from the console.log call.

  <img src="images/print-before-returning.png" />
</div>

<h3 id="formatter" aoid="Formatter" nothrow>Formatter(<var>args</var>)</h3>

The formatter operation tries to format the first argument provided, using the other arguments. It will try to format the input until no formatting specifiers are left in the first argument, or no more arguments are left. It returns a List of objects suitable for printing.

<emu-alg>
  1. Let _target_ be the first element of _args_.
  1. Let _current_ be the second element of _args_.
  1. Find the first possible format specifier _specifier_, from the left to the right in _target_.
    1. If _specifier_ is `%s`, let _converted_ be the result of ToString(_current_).
    1. If _specifier_ is `%d` or `%i`, let _converted_ be the result of %parseInt%(_current_, 10).
    1. If _specifier_ is `%f`, let _converted_ be the result of  %parseFloat%(_current_, 10).
    1. If _specifier_ is `%o`, optionally let _converted_ be an implementation-specific representation of _current_ that is judged to be maximally useful and informative.
    1. If _specifier_ is `%O`, optionally let _converted_ be be an implementation-specific representation of _current_ as an expanded or expandable object, treating _current_ as a generic JavaScript object.
    1. <p class="XXX">TODO: process %c</p>
    1. If any of the previous steps set _converted_, replace _specifier_ in _target_ with _converted_.
    1. Let _result_ be a List containing _target_ together with the elements of _args_ starting from the third onward.
  1. If _target_ does not have any format specifiers left, return _result_.
  1. If _result_ contains just one element, return _result_.
  1. Return Formatter(_result_).
</emu-alg>

<h4 id="formatting-specifiers">Summary of formatting specifiers</h4>

The following is an informative summary of the format specifiers processed by the above algorithm.

<table>
  <thead>
    <tr>
      <th>Specifier</th>
      <th>Purpose</th>
      <th>Type Conversion</th>
    </tr>
  </thead>
  <tr>
  <tr>
    <td><code>%s</code></td>
    <td>Element which substitutes is converted to a string</<td>
    <td>ToString(<var>element</var>)</td>
  </tr>
  <tr>
    <td><code>%d</code> or <code>%i</code></td>
    <td>Element which substitutes is converted to an integer</<td>
    <td>%parseInt%(<var>element</var>, 10)</td>
  </tr>
  <tr>
    <td><code>%f</code></td>
    <td>Element which substitutes is converted to a float</<td>
    <td>%parseFloat%(<var>element</var>, 10)</td>
  </tr>
  <tr>
    <td><code>%o</code></td>
    <td>Element is displayed in an implementation-specific way judged as most useful; potentially interactive</<td>
    <td>n/a</td>
  </tr>
  <tr>
    <td><code>%O</code></td>
    <td>Element is displayed as an expanded JavaScript object; potentially interactive</<td>
    <td>n/a</td>
  </tr>
  <tr>
    <td><code>%c</code></td>
    <td>Applies provided CSS</<td>
    <td>n/a</td>
  </tr>
</table>

<h3 id="printer" aoid="Printer" nothrow>Printer(<var>logLevel</var>, <var>args</var>)</h3>

The printer operation is implementation-defined. It accepts a log level indicating severity, and a List of arguments to print (which are either JavaScript objects, of any type, or are implementation-specific representations of printable things such as a stack trace, or output produced by the <code>%o</code> and <code>%O</code> specifiers). How the implementation prints <var>args</var> is up to the implementation, but implementations should separate the objects by a space or something similar, as that has become a developer expectation.

By the time the printer operation is called, all format specifiers will have been taken into account, and any arguments that are meant to be consumed by format specifiers will not be present in <var>args</var>. The implementation's job is simply to print the List.

If the console is not open when the printer operation is called,
implementations should buffer messages to show them in the future up to an
implementation-chosen limit (typically on the order of at least 100).

<h4 id="nodejs-printer">Example printer in Node.js</h4>

<div class="example" id="nodejs-printer-example">
  The simplest way to implement the printer operation on the Node.js platform is to join the previously formatted arguments separated by a space and write the output to <code>stdout</code> or <code>stderr</code>.

  Example implementation in Node.js using [[!ECMASCRIPT]]:

  <pre><code class="lang-javascript">
    const util = require('util');

    function print(logLevel, ...args) {
      const message = util.format(...args);

      if (logLevel === 'error') {
        process.stderr.write(message + '\n');
      } else if (logLevel === 'log' || logLevel === 'info' || logLevel === 'warn') {
        process.stdout.write(message + '\n');
      }
    }
  </code></pre>

  Here a lot of the work is done by the <code>util.format</code> function. It stringifies nested objects, and converts non-string arguments into a readable string version, e.g. undefined becomes the string <code>"undefined"</code> and false becomes <code>"false"</code>:

  <pre><code class="lang-javascript">
    print('log', 'duck', [{foo: 'bar'}]);     // prints: `duck [ { foo: 'bar' } ]\n` on stdout
    print('log', 'duck', false);              // prints: `duck false\n` on stdout
    print('log', 'duck', undefined);          // prints: `duck undefined\n` on stdout
  </code></pre>
</div>

<h2 id="console-namespace" oldids="console-interface">Namespace <code>console</code></h2>

<pre class="idl">
[Exposed=(Window,Worker,Worklet)]
namespace console { // but see namespace object requirements below
  // Logging
  void assert(optional boolean condition = false, any... data);
  void clear();
  void count(optional DOMString label = "");
  void debug(any... data);
  void error(any... data);
  void info(any... data);
  void log(any... data);
  void table(any tabularData, optional sequence&lt;DOMString> properties);
  void trace(any... data);
  void warn(any... data);

  // Grouping
  void group(any... data);
  void groupCollapsed(any... data);
  void groupEnd();

  // Timing
  void time(optional DOMString label = "default");
  void timeEnd(optional DOMString label = "default");
};
</pre>

<p class="note">
For historical reasons, {{console}} is lowercased.
</p>

<p class="note">
It is important that {{console}} is always visible
and usable to scripts, even if the developer console has not been opened or
does not exist.
</p>

For historical web-compatibility reasons, the <a>namespace object</a> for {{console}} must have as
its \[[Prototype]] an empty object, created as if by ObjectCreate(%ObjectPrototype%), instead of
%ObjectPrototype%.

<h3 id="logging">Logging methods</h3>

<h4 id="assert" oldids="assert-condition-data,dom-console-assert" method for="console">assert(<var>condition</var>, ...<var>data</var>)</h4>

If <var>condition</var> is false, perform Logger("error", <var>data</var>).

<h4 id="clear" oldids="dom-console-clear" method for="console">clear()</h4>

If possible for the environment, clear the console. Otherwise, do nothing.

<h4 id="count" oldids="count-label,dom-console-count" method for="console">count(<var>label</var>)</h4>

<emu-alg>
  1. Let _called_ be the number of times _count_ has been invoked (including this invocation) with the provided _label_.
  1. Let _concat_ be the concatenation of _label_, U+003A COLON (:), U+0020 (SPACE), and ToString(_called_).
  1. Perform Logger("log", _concat_).
</emu-alg>

<h4 id="debug" oldids="debug-data,dom-console-debug" method for="console">debug(...<var>data</var>)</h4>

Perform Logger("log", <var>data</var>).

<h4 id="error" oldids="error-data,dom-console-error" method for="console">error(...<var>data</var>)</h4>

Perform Logger("error", <var>data</var>).

<h4 id="info" oldids="info-data,dom-console-info" method for="console">info(...<var>data</var>)</h4>

Perform Logger("info", <var>data</var>).

<h4 id="log" oldids="log-data,dom-console-log" method for="console">log(...<var>data</var>)</h4>

Perform Logger("log", <var>data</var>).

<h4 id="table" oldids="table-tabulardata-properties,dom-console-table" method for="console">table(<var>tabularData</var>, <var>properties</var>)</h4>

Try to construct a table with the columns of the properties of <var>tabularData</var> (or use <var>properties</var>) and rows of <var>tabularData</var> and log it with a logLevel of log. Fall back to just logging the argument if it can't be parsed as tabular.

<p class="XXX">TODO: This will need a good algorithm.</p>

<h4 id="trace" oldids="trace-data,dom-console-trace" method for="console">trace(...<var>data</var>)</h4>

<emu-alg>
  1. Let _trace_ be some implementation-specific, potentially-interactive representation of the callstack from where this method was called.
  1. Optionally let _formattedData_ be the result of Formatter(<var>data</var>), and incorporate _formattedData_ as a label for _trace_.
  1. Perform Printer("log", «_trace_»).
</emu-alg>

<p class="note">The identifier of a function printed in a stack trace is implementation-dependant. It is also not guaranteed to be the same identifier that would be seen in <code>new Error().stack</code></p>

<h4 id="warn" oldids="warn-data,dom-console-warn" method for="console">warn(...<var>data</var>)</h4>

Perform Logger("warn", <var>data</var>).

<h3 id="grouping">Grouping methods</h3>

<h4 id="group" oldids="group-data,dom-console-group" method for="console">group(...<var>data</var>)</h4>

<h4 id="groupcollapsed" oldids="groupcollapsed-data,dom-console-groupcollapsed" method for="console">groupCollapsed(...<var>data</var>)</h4>

<h4 id="groupend" oldids="dom-console-groupend" method for="console">groupEnd()</h4>

<h3 id="timing">Timing methods</h3>

<h4 id="time" oldids="time-label,dom-console-time" method for="console">time(<var>label</var>)</h4>

Start an internal timer stored in the timer table with key <var>label</var>.

<h4 id="timeend" oldids="timeend-label,dom-console-timeend" method for="console">timeEnd(<var>label</var>)</h4>

Let <var>duration</var> be the current value of the internal timer with key <var>label</var> in the timer table.
Remove the timer from the timer table.
Then, perform Logger("info", «<var>label</var>, <var>duration</var>»).


<h2 id="inspection">JavaScript object inspection</h2>

TODO: Define an interface that allows JavaScript objects to format themselves for inspection.

<h2 id="acks" class="no-num">Acknowledgments</h2>

The editors would like to thank
Boris Zbarsky,
Brent S.A. Cowgill,
Brian Grinstead,
Corey Farwell,
Dominic Farolino,
Ian Kilpatrick,
Jeff Carpenter,
Joseph Pecoraro,
Justin Woo,
Noah Bass,
Paul Irish,
Raphaël, and
Victor Costan
for their contributions to this specification. You are awesome!

This standard is written by <a href="https://terinstock.com">Terin Stock</a> (<a
href="mailto:terin@terinstock.com">terin@terinstock.com</a>) and <a href="http://kowalski.gd">Robert Kowalski</a> (<a
href="mailto:rok@kowalski.gd">rok@kowalski.gd</a>) with major help from <a href="https://domenic.me/">Domenic
Denicola</a> (<a href="https://google.com">Google</a>, <a href="mailto:d@domenic.me">d@domenic.me</a>).

Per <a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>, to the extent possible under law, the editors
have waived all copyright and related or neighboring rights to this work.
