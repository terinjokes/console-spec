<pre class="metadata">
Title: Console Standard
Group: WHATWG
H1: Console
Shortname: console
Repository: whatwg/console
Status: LS
Boilerplate: omit conformance, omit feedback-header
Editor: Terin Stock, https://terinstock.com, terin@terinstock.com
Editor: Robert Kowalski, http://robert-kowalski.de, rok@kowalski.gd
Abstract: This specification standardizes APIs for console debugging facilities.
Logo: https://resources.whatwg.org/logo-console.svg
!Participate: <a href="https://github.com/whatwg/console">GitHub whatwg/console</a> (<a href="https://github.com/whatwg/console/issues/new">new issue</a>, <a href="https://github.com/whatwg/console/issues">open issues</a>)
!Participate: <a href="https://wiki.whatwg.org/wiki/IRC">IRC: #whatwg on Freenode</a>
!Commits: <a href="https://github.com/whatwg/console/commits">https://github.com/whatwg/console/commits</a>

Opaque Elements: emu-alg
Link Defaults: html (dfn) structured clone
</pre>

<style>
  .note + .example, .note + .note { margin-top: 1em; }

  emu-val { font-weight: bold; }
  emu-alg > ol, emu-alg > ol ol ol ol { list-style-type: decimal; }
  emu-alg > ol ol, emu-alg > ol ol ol ol ol { list-style-type: lower-alpha; }
  emu-alg > ol ol ol, emu-alg > ol ol ol ol ol ol { list-style-type: lower-roman; }
  emu-alg li { margin: 0; }

  .heading[aoid] .annotation {
    background-color: beige;
    border: 1px solid black;
    border-radius: 3px;
    cursor: help;
    display: inline-block;
    font-size: 70%;
    font-weight: normal;
    padding: 1px 2px;
  }
</style>

<h2 id="status" class="no-num no-toc">Status</h2>

This specification is an early work in progress that welcomes feedback to refine toward more precise and compatible definitions. It is also the editors' first specification, so please be kind and constructive.

Please join us in the <a href="https://github.com/whatwg/console/issues">issue tracker</a> for more discussion.

<h2 id="supporting-ops">Supporting abstract operations</h2>

<h3 id="logger" aoid="Logger" nothrow>Logger(<var>logLevel</var>, <var>args</var>)</h3>

The logger operation accepts a log level and a List of other arguments. Its main output is the implementation-defined side effect of printing the result to the console. This specification describes how it processes format specifiers while doing so.

<emu-alg>
  1. Let _first_ be the first element of _args_. If _args_ is empty, abort these steps.
  1. Let _rest_ be all elements following _first_ in _args_.
  1. If _rest_ is empty, print _first_ to the console. Abort these steps.
  1. If _first_ does not contain any format specifiers, perform Printer(_logLevel_, _args_).
  1. Otherwise, perform Printer(_logLevel_, Formatter(_args_)).
  1. Return *undefined*.
</emu-alg>

<h3 id="formatter" aoid="Formatter" nothrow>Formatter(<var>args</var>)</h3>

The formatter operation tries to format the first argument provided, using the other arguments. It will try to format the input until no <a>formatting specifiers</a> are left in the first argument, or no more arguments are left. It returns a List of objects suitable for printing.

<emu-alg>
  1. Let _target_ be the first element of _args_.
  1. Let _current_ be the second element of _args_.
  1. Find the first possible format specifier _specifier_, from the left to the right in _target_.
    1. If _specifier_ is `%s`, let _converted_ be the result of ToString(_current_).
    1. If _specifier_ is `%d` or `%i`, let _converted_ be the result of %parseInt%(_current_, 10).
    1. If _specifier_ is `%f`, let _converted_ be the result of  %parseFloat%(_current_, 10).
    1. Replace _specifier_ in _target_ with _converted_.
    1. Let _result_ be a List containing _target_ together with the elements of _args_ starting from the third onward.
  1. If _target_ does not have any format specifiers left, return _result_.
  1. If _result_ contains just one element, return _result_.
  1. Return Formatter(_result_).
</emu-alg>

<h3 id="printer" aoid="Printer" nothrow>Printer(<var>logLevel</var>, <var>args</var>)</h3>

The printer operation is implementation-defined. It accepts a log level indicating severity, and a List of arguments to print (which are JavaScript objects, of any type). How the implementation prints <var>args</var> is up to the implementation, but implementations should separate the objects by a space or something similar, as that has become a developer expectation.

By the time the printer operation is called, all format specifiers will have been taken into account, and any arguments that are meant to be consumed by format specifiers will not be present in <var>args</var>. The implementation's job is simply to print the List.

<h4 id="nodejs-printer">Example printer in Node.js</h4>

<div class="example">
  The simplest way to implement the printer operation on the Node.js platform is to join the previously formatted arguments separated by a space and write the output to <code>stdout</code> or <code>stderr</code>.

  Example implementation in Node.js using [[!ECMASCRIPT]]:

  <pre><code class="lang-javascript">
    const util = require('util');

    function print(logLevel, ...args) {
      const message = util.format(...args);

      if (logLevel === 'error') {
        process.stderr.write(message + '\n');
      } else if (logLevel === 'log' || logLevel === 'info' || logLevel === 'warn') {
        process.stdout.write(message + '\n');
      }
    }
  </code></pre>

  Here a lot of the work is done by the <code>util.format</code> function. It stringifies nested objects, and converts non-string arguments into a readable string version, e.g. undefined becomes the string <code>"undefined"</code> and false becomes <code>"false"</code>:

  <pre><code class="lang-javascript">
    print('log', 'duck', [{foo: 'bar'}]);     // prints: `duck [ { foo: 'bar' } ]\n` on stdout
    print('log', 'duck', false);              // prints: `duck false\n` on stdout
    print('log', 'duck', undefined);          // prints: `duck undefined\n` on stdout
  </code></pre>
</div>

<h2 id="console-interface">Interface <code>Console</code></h2>

<pre class="idl">
[NoInterfaceObject]
interface Console {
  // Logging
  void assert(boolean condition, optional any message);
  void clear();
  void count(optional DOMString label = "");
  void debug(any... data);
  void error(any... data);
  void info(any... data);
  void log(any... data);
  void table(any tabularData, optional sequence&lt;DOMString> properties);
  void trace(any... data);
  void warn(any... data);

  // Grouping
  void group(any... data);
  void groupCollapse(any... data);
  void groupEnd();

  // Timing
  void time(DOMString label);
  void timeEnd(DOMString label);
};

partial interface Window {
  attribute Console console;
};

partial interface WorkerGlobalScope {
  attribute Console console;
};
</pre>

<h3 id="logging">Logging methods</h3>

<h4><dfn method for="Console">assert(<var>condition</var>, <var>message</var>)</dfn></h4>

If <var>condition</var> is false, perform Logger("error", «<var>message</var>»).

<h4><dfn method for="Console">clear()</dfn></h4>

If possible for the environment, clear the console. Otherwise, do nothing.

<h4><dfn method for="Console">count(<var>label</var>)</dfn></h4>

<emu-alg>
  1. Let _called_ be the number of times _count_ has been invoked (including this invocation) with the provided _label_.
  1. Let _concat_ be the concatenation of _label_, U+003A COLON (:), U+0020 (SPACE), and ToString(_called_).
  1. Perform Logger("log", _concat_).
</emu-al>

<h4><dfn method for="Console">debug(...<var>data</var>)</dfn></h4>

Perform Logger("log", <var>data</var>).

<h4><dfn method for="Console">error(...<var>data</var>)</dfn></h4>

Perform Logger("error", <var>data</var>).

<h4><dfn method for="Console">info(...<var>data</var>)</dfn></h4>

Perform Logger("info", <var>data</var>).

<h4><dfn method for="Console">log(...<var>data</var>)</dfn></h4>

Perform Logger("log", <var>data</var>).

<h4><dfn method for="Console">table(<var>tabularData</var>, <var>properties</var>)</dfn></h4>

Try to construct a table with the columns of the properties of tabularData and rows of tabularData and log it with a logLevel of log.
Fall back to just logging the argument if it can't be parsed as tabular.

TODO: This will need a good algorithm.

<h4><dfn method for="Console">trace(...<var>data</var>)</dfn></h4>

Perform Logger("error", <var>data</var>).

<h4><dfn method for="Console">warn(...<var>data</var>)</dfn></h4>

Perform Logger("warn", <var>data</var>).

<h3 id="grouping">Grouping methods</h3>

<h4><dfn method for="Console">group(...<var>data</var>)</dfn></h4>

<h4><dfn method for="Console">groupCollapse(...<var>data</var>)</dfn></h4>

<h4><dfn method for="Console">groupEnd()</dfn></h4>

<h3 id="timing">Timing methods</h3>

<h4><dfn method for="Console">time(<var>label</var>)</dfn></h4>

Start an internal timer stored in the timer table with key <var>label</var>.

<h4><dfn method for="Console">timeEnd(<var>label</var>)</dfn></h4>

Let <var>duration</var> be the current value of the internal timer with key <var>label</var> in the timer table.
Remove the timer from the timer table.
Then, perform Logger("info", «<var>label</var>, <var>duration</var>»).


<h2 id="formatting-specifiers"><dfn>Formatting specifiers</dfn></h2>

<h3 id="formatting-no-ui">Formatting specifiers that don't require a complex UI</h3>

<table>
  <thead>
    <tr>
      <th>Specifier</th>
      <th>Function</th>
      <th>Type Conversion</th>
    </tr>
  </thead>
  <tr>
  <tr>
    <td>%s</td>
    <td>Element which substitutes is converted to a String</<td>
    <td>ToString(element)</td>
  </tr>
  <tr>
    <td>%d</td>
    <td>Element which substitutes is converted to an Integer</<td>
    <td>%parseInt%(element, 10)</td>
  </tr>
  <tr>
    <td>%i</td>
    <td>Element which substitutes is converted to an Integer</<td>
    <td>%parseInt%(element, 10)</td>
  </tr>
  <tr>
    <td>%f</td>
    <td>Element which substitutes is converted to a Float</<td>
    <td>%parseFloat%(element, 10)</td>
  </tr>
</table>

<h3 id="formatting-complex-ui">Formatting specifiers that require a complex UI</h3>

<table>
  <thead>
    <tr>
      <th>Specifier</th>
      <th>Function</th>
      <th>Type Conversion</th>
    </tr>
  </thead>
 <tr>
    <td>%o</td>
    <td>Displays as expandable DOM element</<td>
    <td>n/a</td>
  </tr>
  <tr>
    <td>%O</td>
    <td>Displays as expandable JS Object</<td>
    <td>n/a</td>
  </tr>
  <tr>
    <td>%c</td>
    <td>Applies provided CSS</<td>
    <td>n/a</td>
  </tr>
</table>

<h2 id="inspection">JavaScript object inspection</h2>

TODO: Define an interface that allows JavaScript objects to format themselves for inspection.

<h2 id="acks" class="no-num">Acknowledgments</h2>

The editors would like to thank
Corey Farwell,
Jeff Carpenter,
Justin Woo,
and Paul Irish
for their contributions to this specification. You are awesome!

This standard is written by <a href="https://terinstock.com">Terin Stock</a> (<a
href="mailto:terin@terinstock.com">terin@terinstock.com</a>) and <a href="http://kowalski.gd">Robert Kowalski</a> (<a
href="mailto:rok@kowalski.gd">rok@kowalski.gd</a>) with major help from <a href="https://domenic.me/">Domenic
Denicola</a> (<a href="https://google.com">Google</a>, <a href="mailto:d@domenic.me">d@domenic.me</a>).

Per <a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>, to the extent possible under law, the editors
have waived all copyright and related or neighboring rights to this work.
