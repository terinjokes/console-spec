<pre class="metadata">
Title: Console Standard
Group: WHATWG
H1: Console
Shortname: console
Level: 1
Status: DREAM
ED: https://terinjokes.github.io/console-spec
Editor: Terin Stock, https://terinstock.com, terin@terinstock.com
Abstract: This specification standardizes APIs for console debugging facilities.
Logo: https://cdn.rawgit.com/terinjokes/console-spec/dd485319b0d0c918d954e0daafd349c9387c6e8c/logo.svg
!Version History: <a href="https://github.com/terinjokes/console-spec/commits">https://github.com/terinjokes/console-spec/commits</a>
!Participate: <a href="https://github.com/terinjokes/console-spec/issues/new">File an issue</a> (<a href="https://github.com/terinjokes/console-spec/issues?state=open">open issues</a>)
!Participate: Send feedback to <a href="http://www.whatwg.org/mailing-list">whatwg@whatwg.org</a> (<a href="http://www.whatwg.org/mailing-list#specs">archives</a>)
!Participate: <a href="http://wiki.whatwg.org/wiki/IRC">IRC: #whatwg on Freenode</a>
</pre>

<h2 id="status" class="no-num no-toc">Status</h2>
This specification is in the process of establishing itself in the WHATWG.
As such, the term "Living Standard" indicates a goal, rather than reality.

Please join us in the <a href="https://github.com/terinjokes/console-spec/issues?state=open">issue tracker</a> for more discussion.

<h2 id="logger-function">Logger Function</h2>
The logging function accepts datum and the logLevel, which is stored or displayed in a platform appropriate way.

TODO: Describe the interaction of format specifiers and object inspection with respect to what is stored or displayed

TODO: Add notes to give examples of how a platform might implement the side effects of this logging function.

<h2 id="console-interface">Interface <code>Console</code></h2>

<pre class="idl">
[NoInterfaceObject]
interface Console {
  // Logging
  void assert(boolean condition, optional any message);
  void clear();
  void count(optional DOMString label = "");
  void debug(any... data);
  void error(any... data);
  void info(any... data);
  void log(any... data);
  void table(any tabularData, optional sequence&lt;DOMString> properties);
  void trace(any... data);
  void warn(any... data);

  // Grouping
  void group(any... data);
  void groupCollapse(any... data);
  void groupEnd();

  // Timing
  void time(DOMString label);
  void timeEnd(DOMString label);
};

partial interface Window {
  attribute Console console;
};

partial interface WorkerGlobalScope {
  attribute Console console;
};
</pre>

<h3 id="logging">Logging Methods</h3>

<h4><dfn method for="Console">assert()</dfn></h4>
If expression is false, the side effect of running the logger function with the message as data, and the logLevel set to error.

<h4><dfn method for="Console">clear()</dfn></h4>
If possible for the environment, clear the console. Otherwise, do nothing.

<h4><dfn method for="Console">count()</dfn></h4>
Counts the number of times count has been called with the provided label.

<h4><dfn method for="Console">debug()</dfn></h4>

The side effect of running the logger function with data and logLevel set to log.

<h4><dfn method for="Console">error()</dfn></h4>

The side effect of running the logger function with data and logLevel set to error.

<h4><dfn method for="Console">info()</dfn></h4>

The side effect of running the logger function with data and logLevel set to info.

<h4><dfn method for="Console">log([arg1], [arg2], ...)</dfn></h4>

Prints to the console as side effect of running the logger function if the logLevel is set to log. If the log function is called with no arguments, no output is written to the console. Each log entry from console.log gets an own line in the console. It is possible to pass format specifiers to the function in the first argument.

<emu-alg>
1. If no argument given, _log_ prints nothing to the console
1. If at least one argument given, print it to the console on a new line
2. If _arg1_ contains one or more format specifier, interpolate the string. Apply a type conversion to each argument following _arg1_ which matches the corresponding format specifier from left to right
3. If there are more arguments than format specifiers, print them separated by a space
3. If there are more format specifiers than given arguments, print the specifier
</emu-alg>

<h4><dfn method for="Console">table()</dfn></h4>

Try to construct a table with the columns of the properties of tabularData and rows of tabularData and log it with a logLevel of log.
Fall back to just logging the argument if it can't be parsed as tabular.

TODO: This will need a good algorithm.

<h4><dfn method for="Console">trace()</dfn></h4>

The side effect of running the logger function with data and logLevel set to error.

<h4><dfn method for="Console">warn()</dfn></h4>

The side effect of running the logger function with data and logLevel set to warn.

<h3 id="grouping">Grouping Methods</h3>

<h4><dfn method for="Console">group()</dfn></h4>

<h4><dfn method for="Console">groupCollapse()</dfn></h4>

<h4><dfn method for="Console">groupEnd()</dfn></h4>

<h3 id="timing">Timing Methods</h3>

<h4><dfn method for="Console">time()</dfn></h4>

Start an internal timer stored in the timer table as label.

<h4><dfn method for="Console">timeEnd()</dfn></h4>

Store the current value of the internal timer stored as label as duration.
Remove the timer from tha timer table.
Then, the side effect of running the logger function with arguments label and duration.

<h2 id="formatting">Formatting Specifiers</h2>

Note: Consider keeping these format specifiers general enough to be re-used by other specifications.

<h2 id="inspection">JavaScript Object inspection</h2>

TODO: Define an interface that allows JavaScript objects to format themselves for inspection.

<h2 id="acks" class="no-num">Acknowledgments</h2>
